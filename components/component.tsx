"use client"

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/a8jwOhO9bv9
 */
import { TableHead, TableRow, TableHeader, TableCell, TableBody, Table } from "@/components/ui/table"
import { TabsTrigger, TabsList, TabsContent, Tabs } from "@/components/ui/tabs"
import { CardTitle, CardDescription, CardHeader, CardContent, Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"

import '@polkadot/api-augment'
import React, { useState } from 'react'
import { GearKeyring } from '@gear-js/api'
import { encodeAddress } from '@polkadot/util-crypto'
import useSWR, { mutate } from 'swr'
import { CodeBlock, CopyBlock, dracula } from 'react-code-blocks'
import { FileUploader } from 'react-drag-drop-files'
import { hexToU8a } from '@polkadot/util'

const register = async (address: string) => {
  const res = await fetch(`/api/register/${address}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ address }),
  });

  if (!res.ok) {
    const errorData = await res.json();
    throw new Error(`Failed to register for auction: ${errorData.message}`);
  }

  return res.json();
};

const fetcher = (url: string) => fetch(url).then(res => res.json());

enum Progress {
  ACCOUNT = 1,
  REGISTER,
  PROOF,
  BID,
}

const DEBUG = true;

export function Component() {
  const [account, setAccount] = useState<null | { address: string; keyring: GearKeyring; }>(null);
  const [message, setMessage] = useState<null | string>(null);
  const [progress, setProgress] = useState<Progress>(Progress.ACCOUNT);
  const [selectedTab, setSelectedTab] = useState<string>('account');
  const [file, setFile] = useState<null | File>(null);
  const [price, setPrice] = useState<number | null>(null);

  const generateAccount = async () => {
    const {keyring} = await GearKeyring.create('seed');
    
    const newAccount = {
      address: encodeAddress(keyring.publicKey, 137),
      keyring: keyring,
    };

    setAccount(newAccount);
    setProgress(Progress.REGISTER);
    setMessage(null);
    setTimeout(()=>setSelectedTab('register'), 1000);
  };

  const registerForAuction = async () => {
    setMessage(null);

    if (!account) {
      setMessage('Error: no account to register for auction. Go generate an account first.');
      return;
    }

    try {
      const data = await mutate([account.address], register(account.address), false);
      setMessage(`${JSON.stringify(data, null, "  ")}`);
      setProgress(Progress.PROOF);
      setTimeout(()=>setSelectedTab('proof'), 1000);
    } catch (error) {
      setMessage(`Error registering for auction: ${error}`);
      setProgress(Progress.REGISTER);
    }
  };

  const generateProof = async () => {
    setProgress(Progress.BID);
    setTimeout(()=>setSelectedTab('bid'), 1000);
  };

  const uploadProof = (file: File) => {
    setFile(file);
  };

  const readAsText = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = function(e: ProgressEvent<FileReader>) {
        const text = e.target!.result;
        resolve(text as string);
      };
      reader.onerror = function(e) {
        reject(new Error("Failed to read file"));
      };
      reader.readAsText(file);
    });
  };

  const placeBid = async () => {
    console.log('placeBid', file, account);

    if (!account) {
      window.alert('Error: no account to place bid. Go generate an account first.');
      return;
    }

    if (!price || price <= 0) {
      window.alert('Error: no valid price to place bid. Enter a valid price and try again.');
      return;
    }

    if (!file) {
      window.alert('Error: no proof file uploaded. Go generate a proof and upload it first.');
      return;
    }

    let proof = await readAsText(file);

    let proofBytes = hexToU8a(`0x${proof}`);
    console.log('proof:', proof);
    console.log('proofBytes:', proofBytes);

    window.alert('Not implemented');
  };

  const code = `# set the secret key of the main funding account
export SURI="abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon cactus"

# install the zkBid CLI
cargo install zkbid-cli

# generate a proof that the main account has enough funds to place a bid, for example, 42 VARA
# you should replace the price with the actual price you want to bid
# the proof will be saved to proof.txt
zkbid proof --suri "$SURI" --price 42 > proof.txt`;

  const { data, error } = useSWR('/api/program-state', fetcher, { refreshInterval: 5000 });

  if (error) return <div>Failed to load</div>;
  if (!data) return <div>Loading...</div>;

  // Sort bids in descending order by amount and add rank
  const sortedBids = [...data.bids].sort((a, b) => b.amount - a.amount);
  sortedBids.forEach((bid, index) => {
    bid.rank = index + 1;
  });

  return (
    <div>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="font-bold text-center" colSpan={4}>
              All Existing Bids
            </TableHead>
          </TableRow>
          <TableRow>
            <TableHead>Bidder</TableHead>
            <TableHead>Price (VARA)</TableHead>
            <TableHead>Rank</TableHead>
          </TableRow>
        </TableHeader>
        {
          data ? (
            <TableBody>
            {sortedBids.map((bid) => (
              <TableRow key={bid.address}>
                <TableCell>{encodeAddress(bid.address, 137)}</TableCell>
                <TableCell>{bid.amount}</TableCell>
                <TableCell>{bid.rank}</TableCell>
              </TableRow>
            ))}
            </TableBody>
          ) : (<div>Loading...</div>)
        }
      </Table>
      <Tabs  className="w-full overflow-x-auto" defaultValue="account" value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid grid-cols-4 gap-4 flex flex-wrap">
          <TabsTrigger value="account" disabled={DEBUG ? false : progress < Progress.ACCOUNT}>Generate Account</TabsTrigger>
          <TabsTrigger value="register" disabled={DEBUG ? false : progress < Progress.REGISTER}>Register for Auction</TabsTrigger>
          <TabsTrigger value="proof" disabled={DEBUG ? false : progress < Progress.PROOF}>Generate Proof</TabsTrigger>
          <TabsTrigger value="bid" disabled={DEBUG ? false : progress < Progress.BID}>Place Bid</TabsTrigger>
        </TabsList>
        <TabsContent value="account">
          <Card>
            <CardHeader>
              <CardTitle>Generate Account</CardTitle>
              <CardDescription>
                Creates a keypair for a temporary account and stores it on the frontend.
              </CardDescription>
            </CardHeader>
            <CardContent className="grid gap-4">
              {account && (
                <div className="flex items-center gap-2">
                  <Input className="w-full" id="address" readOnly type="text" value={account.address} />
                </div>
              )}
              <Button onClick={generateAccount}>Generate Account</Button>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="register">
          <Card>
            <CardHeader>
              <CardTitle>Register for Auction</CardTitle>
              <CardDescription>Sends an HTTPS request to the backend to fetch a voucher.</CardDescription>
            </CardHeader>
            <CardContent className="grid gap-4">
              {account && (
                <div className="flex items-center gap-2">
                  <Input className="w-full" id="address" readOnly type="text" value={account.address} />
                </div>
              )}
              {message && <CodeBlock text={message} language={"json"} showLineNumbers={false} wrapLongLines theme={dracula} />}
              <Button onClick={registerForAuction}>Register for Auction</Button>
            </CardContent>
          </Card>
        </TabsContent>
	      <TabsContent value="proof">
          <Card>
            <CardHeader>
              <CardTitle>Generate Proof</CardTitle>
              <CardDescription>Takes private key of main account(one that is funded) and generates proof that it have enough funds to place a bid. Instructions for generating proof locally:</CardDescription>
            </CardHeader>
            <CardContent className="grid gap-4">
            <CopyBlock language={"bash"} text={code} showLineNumbers wrapLongLines theme={dracula} />
            <Button onClick={generateProof}>I have generated the proof</Button>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="bid">
          <Card>
            <CardHeader>
              <CardTitle>Place Bid</CardTitle>
              <CardDescription>
                Sends a message to the auction contract using the fetched voucher and generated account.
              </CardDescription>
            </CardHeader>
            <CardContent className="grid gap-4">
              {account && (
                <div className="flex items-center gap-2">
                  <Input className="w-full" id="address" readOnly type="text" value={account.address} />
                </div>
              )}
              <div className="flex items-center space-x-4">
                <Input id="price" placeholder="Enter price" type="number" onChange={(event: React.ChangeEvent<HTMLInputElement>) => setPrice(Number(event.target.value))} />
                <Label className="" htmlFor="vara">
                  VARA
                </Label>
              </div>
              <FileUploader
                label="Drag and drop your proof file here, or click to select file from disk. "
                multiple={false}
                handleChange={uploadProof}
                name="proof.txt"
                types={["TXT"]}
                classes={"uploader"}
                className="w-full h-full"
              >
                <div
                  className="w-full h-full flex flex-col items-center justify-center"
                  style={{
                    height: "200px",
                    border: "2px dashed #e9e9e9",
                    borderRadius: "5px",
                  }}
                >
                  <h5>Drag and drop your proof file here, or click to select file from disk.</h5>
                  <br/>
                  <h5>{file ? `Selected file: ${file.name}` : "(No proof file uploaded yet)"}</h5>
                </div>
              </FileUploader>
              <Button onClick={placeBid}>Place Bid</Button>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
